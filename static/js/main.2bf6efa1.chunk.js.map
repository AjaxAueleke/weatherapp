{"version":3,"sources":["components/Temperature.js","App.js","reportWebVitals.js","index.js"],"names":["Temperature","props","Card","className","Header","city","Body","Title","Math","round","temp","Text","description","toUpperCase","class","high","low","API_KEY","App","useState","name","setName","data","setData","location","setLocation","Object","keys","length","constructor","navigator","geolocation","getCurrentPosition","pos","console","log","lat","coords","latitude","long","longitude","useEffect","a","axios","get","response","error","getWeatherData","Navbar","sticky","expand","variant","bg","Container","Brand","href","InputGroup","FormControl","placeholder","onChange","e","target","value","main","temp_max","temp_min","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4UAoBeA,EAhBK,SAACC,GACnB,OACE,eAACC,EAAA,EAAD,CAAMC,UAAU,0CAAhB,UACE,cAACD,EAAA,EAAKE,OAAN,UAAcH,EAAMI,OACpB,eAACH,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKK,MAAN,UAAaC,KAAKC,MAAMR,EAAMS,QAC9B,cAACR,EAAA,EAAKS,KAAN,UAAYV,EAAMW,YAAYC,gBAC9B,qBAAIC,MAAM,WAAV,UACE,sCAASN,KAAKC,MAAMR,EAAMc,SAC1B,sCAASP,KAAKC,MAAMR,EAAMe,kBCR9BC,EAAU,mCAiEDC,MA/Df,SAAajB,GACX,MAAwBkB,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAiCA,OAhCIH,GAAqC,IAA7BI,OAAOC,KAAKL,GAAMM,QAAgBN,EAAKO,cAAgBH,QAC7DI,UAAUC,aACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxCC,QAAQC,IAAI,SACZZ,EAAQ,CACNa,IAAKH,EAAII,OAAOC,SAChBC,KAAMN,EAAII,OAAOG,eAKzBC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,6DACER,QAAQC,IAAI,yBADd,kBAGyBQ,IAAMC,IAAN,6DACmCpC,KAAKC,MACzDa,EAAKc,KAFY,gBAGV5B,KAAKC,MAAMa,EAAKiB,MAHN,kBAGqBtB,EAHrB,kBAHzB,UAGQ4B,EAHR,QAQQzB,EARR,gCASuBuB,IAAMC,IAAN,2DAA8DxB,EAA9D,kBAA4EH,EAA5E,kBATvB,OASM4B,EATN,cAWIX,QAAQC,IAAIU,EAASvB,MACrBG,EAAYoB,EAASvB,MAZzB,kDAcIY,QAAQY,MAAR,MAdJ,2DADc,uBAAC,WAAD,wBAkBdC,KACC,CAACzB,EAAKF,IAGP,gCACE,cAAC4B,EAAA,EAAD,CAAQC,OAAO,MAAM9C,UAAU,MAAK+C,OAAO,KAAKC,QAAQ,OAAOC,GAAG,OAAlE,SACE,cAACC,EAAA,EAAD,UACE,cAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,IAAnB,6BAGJ,cAACC,EAAA,EAAD,CAAYrD,UAAU,OAAtB,SACF,cAACsD,EAAA,EAAD,CACEC,YAAY,uBACZ,aAAW,uBACX,mBAAiB,eACjBC,SAAY,SAACC,GAAD,OAAQvC,EAAQuC,EAAEC,OAAOC,YAGrC,cAAC,EAAD,CACEzD,KAAMmB,EAASJ,MAAQ,UACvBV,KAAMc,EAASuC,KAAOvC,EAASuC,KAAKrD,KAAO,KAC3CE,YAAa,OAEbG,KAAMS,EAASuC,KAAOvC,EAASuC,KAAKC,SAAW,MAC/ChD,IAAKQ,EAASuC,KAAOvC,EAASuC,KAAKE,SAAW,WCpDvCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2bf6efa1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Temperature.css\";\r\nimport { Card  } from \"react-bootstrap\";\r\n\r\nconst Temperature = (props) => {\r\n  return (\r\n    <Card className=\"m-auto text-center d-block w-lg-50 w-50\">\r\n      <Card.Header>{props.city}</Card.Header>\r\n      <Card.Body>\r\n        <Card.Title>{Math.round(props.temp)}</Card.Title>\r\n        <Card.Text>{props.description.toUpperCase()}</Card.Text>\r\n        <h4 class=\"high-low\">\r\n          <span>H:{Math.round(props.high)}</span>\r\n          <span>L:{Math.round(props.low)}</span>\r\n        </h4>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Temperature;\r\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport {Navbar,Container, Button,InputGroup, FormControl} from 'react-bootstrap';\nimport Temperature from \"./components/Temperature\";\nconst API_KEY = \"bdcb0085e5ff638cc0f920d918a5ddf6\";\n\nfunction App(props) {\n  const [name, setName] = useState('');\n  const [data, setData] = useState({});\n  const [location, setLocation] = useState({});\n  if (data && Object.keys(data).length === 0 && data.constructor === Object) {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((pos) => {\n        console.log(\"bitch\");\n        setData({\n          lat: pos.coords.latitude,\n          long: pos.coords.longitude,\n        });\n      });\n    }\n  }\n  useEffect(() => {\n    async function getWeatherData() {\n      console.log(\"USE EFFECT IS RUNNING\");\n      try {\n        let response = await axios.get(\n          `http://api.openweathermap.org/data/2.5/weather?lat=${Math.round(\n            data.lat\n          )}&lon=${Math.round(data.long)}&appid=${API_KEY}&units=metric`\n        );\n        if (name) {\n          response = await axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${name}&appid=${API_KEY}&units=metric`) \n        }\n        console.log(response.data);\n        setLocation(response.data);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    getWeatherData();\n  }, [data,name]);\n\n  return (\n    <div>\n      <Navbar sticky=\"top\" className=\"nav\"expand=\"lg\" variant=\"dark\" bg=\"dark\">\n        <Container>\n          <Navbar.Brand href=\"#\">Weather App</Navbar.Brand>\n        </Container>\n      </Navbar>\n      <InputGroup className=\"mb-3\">\n    <FormControl\n      placeholder=\"Recipient's username\"\n      aria-label=\"Recipient's username\"\n      aria-describedby=\"basic-addon2\"\n      onChange = {(e) => (setName(e.target.value))}\n    />\n  </InputGroup>\n      <Temperature\n        city={location.name || \"Karachi\"}\n        temp={location.main ? location.main.temp : \"39\"}\n        description={\"Rain\"}\n        // description={location.weather ? location.weather[0].main : \"Rainy\"}\n        high={location.main ? location.main.temp_max : \"145\"}\n        low={location.main ? location.main.temp_min : \"39\"}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}